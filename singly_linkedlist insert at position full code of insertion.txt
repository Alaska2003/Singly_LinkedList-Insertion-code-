#include <iostream>
#include <cstddef> // for NULL

class Node {
public:
    int data;
    Node *next;
    
    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

void Insertathead(Node *&head, int data) {
    Node *temp = new Node(data);
    temp->next = head;
    head = temp;
}

void Insertattail(Node* &tail, int data) {
    Node* temp = new Node(data);
    if (tail == NULL) {
        tail = temp;
        return;
    }
    tail->next = temp;
    tail = temp;
}

void InsertAtposition(Node* &head, int position, int data) {
    Node* temp = head;
    int cnt = 1;
    while (cnt < position - 1) {
        temp = temp->next;
        cnt++;
    }

    Node* NodeToInsert = new Node(data);

    NodeToInsert->next = temp->next;
    temp->next = NodeToInsert;

    if (position == 1) {
        Insertathead(head, data);
        return;
    }
    if (temp->next == NULL) {
        Insertattail(head, data);
        return;
    }
}

void print(Node* &head) {
    Node *point = head;
    while (point != NULL) {
        std::cout << point->data << " ";
        point = point->next;
    }
    std::cout << std::endl;
}

int main() {
    Node* node1 = new Node(10);
    Node *head = node1;
    Node *tail = node1; // Initialize tail
    
    print(head);
    
    Insertathead(head, 12);
    print(head);
    
    Insertathead(head, 15);
    print(head);
    
    Insertattail(tail, 16);
    print(head);
    
    InsertAtposition(head, 4, 22);
    print(head);
    
    std::cout << "head: " << head->data << std::endl;
    std::cout << "tail: " << tail->data << std::endl;

    return 0;
} 																																								Output:
10 
12 10 
15 12 10 
15 12 10 16 
15 12 10 22 16 
head: 15
tail: 16
